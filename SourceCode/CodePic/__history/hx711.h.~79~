#ifndef HX711_H
#define HX711_H

// HX711 Pin Definitions
#define HX711_DT_PIN  PIN_A0
#define HX711_SCK_PIN PIN_A1

// --- Configuration Constants ---
#define NUM_SAMPLES_PER_AVERAGE_CYCLE 30
#define NUM_AVERAGE_CYCLES_FOR_READ 3
#define DEADZONE_RAW_DELTA 300

// --- Ch? d? ho?t d?ng ---
typedef enum {
    MODE_NORMAL_WEIGHT,
    MODE_COLLECT_RAW_DATA
} HX711_OperationMode;

static HX711_OperationMode current_hx711_mode = MODE_NORMAL_WEIGHT;

// --- Global static variables ---
static long HX711_OFFSET = 0;
static double HX711_SCALE = 466.837; // Gi? giá tr? SCALE c?a b?n

// --- Function Prototypes ---
void hx711_init_pins(void);
unsigned int32 readCount_internal(void);
long readAverageRawValue(int8 num_cycles);
void hx711_tare(int8 ignored_times);
float hx711_get_units(int8 ignored_times);

void hx711_set_mode(HX711_OperationMode mode);
HX711_OperationMode hx711_get_mode(void);
long hx711_get_current_offset(void);
void hx711_set_current_offset(long offset_val);
void hx711_set_current_scale(double scale_val);

// --- Function Implementations ---

void hx711_init_pins(void) {
    output_low(HX711_SCK_PIN);
}

unsigned int32 readCount_internal(void) {
    unsigned int32 data_value = 0;
    unsigned int8 i;
    unsigned int16 timeout_counter = 0;

    output_low(HX711_SCK_PIN); 
    delay_us(1);

    while (input(HX711_DT_PIN)) {
        delay_us(1);
        if (++timeout_counter > 60000) return 0x7FFFFF; // Timeout
    }

    for (i = 0; i < 24; i++) {
        output_high(HX711_SCK_PIN); 
        delay_us(1);
        data_value = data_value << 1;
        output_low(HX711_SCK_PIN); 
        delay_us(1);
        if (input(HX711_DT_PIN)) data_value++;
    }

    output_high(HX711_SCK_PIN); 
    delay_us(1);
    data_value = data_value ^ 0x800000;
    output_low(HX711_SCK_PIN); 
    delay_us(1);
    return data_value;
}

long readAverageRawValue(int8 num_cycles) {
    long long total_sum_of_averages = 0; // S? d?ng long long d? d?m b?o không tràn
    long current_cycle_average;
    unsigned long current_cycle_raw_sum; // unsigned long (32-bit) là d? cho t?ng 30*2^24
    int8 k_sample;

    if (num_cycles < 1) num_cycles = 1;

    for (int8 cycle = 0; cycle < num_cycles; cycle++) {
        current_cycle_raw_sum = 0;
        for (k_sample = 0; k_sample < NUM_SAMPLES_PER_AVERAGE_CYCLE; k_sample++) {
            current_cycle_raw_sum += readCount_internal();
        }
        current_cycle_average = current_cycle_raw_sum / NUM_SAMPLES_PER_AVERAGE_CYCLE;
        total_sum_of_averages += current_cycle_average;
        
        if (num_cycles > 1 && cycle < (num_cycles - 1)) {
            delay_ms(5); 
        }
    }
    return (long)(total_sum_of_averages / num_cycles);
}

void hx711_tare(int8 ignored_times) {
   HX711_OFFSET = readAverageRawValue(NUM_AVERAGE_CYCLES_FOR_READ);
}

float hx711_get_units(int8 ignored_times) {
    if (current_hx711_mode == MODE_COLLECT_RAW_DATA) {
        return (float)readAverageRawValue(NUM_AVERAGE_CYCLES_FOR_READ);
    } else {
        long raw_avg_value = readAverageRawValue(NUM_AVERAGE_CYCLES_FOR_READ);
        long delta = raw_avg_value - HX711_OFFSET;

        if (delta < DEADZONE_RAW_DELTA && delta > -DEADZONE_RAW_DELTA) {
            delta = 0;
        }
        
        if (HX711_SCALE == 0.0) return 0.0;
        
        float weight = (float)delta / HX711_SCALE;
        // if (weight < 0) weight = 0; // Có th? không c?n n?u deadzone ho?t d?ng t?t
        // if (weight > 99999) weight = 99999; // Gi? gi?i h?n c?a b?n
        return weight;
    }
}

void hx711_set_mode(HX711_OperationMode mode) {
    current_hx711_mode = mode;
}

HX711_OperationMode hx711_get_mode(void) {
    return current_hx711_mode;
}

long hx711_get_current_offset(void) {
    return HX711_OFFSET;
}

void hx711_set_current_offset(long offset_val){
    HX711_OFFSET = offset_val;
}

void hx711_set_current_scale(double scale_val){
    HX711_SCALE = scale_val;
}

#endif // HX711_H
