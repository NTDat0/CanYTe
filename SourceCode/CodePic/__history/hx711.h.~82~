#ifndef HX711_H
#define HX711_H

// HX711 Pin Definitions
#define HX711_DT_PIN PIN_A0
#define HX711_SCK_PIN PIN_A1

// --- Configuration Constants ---
#define NUM_SAMPLES_FOR_AVERAGE 30
#define NUM_READINGS_FOR_STABILITY 5
#define STABILITY_THRESHOLD_RAW 150 
#define STABILIZATION_DELAY_MS 50   
#define MAX_STABILIZATION_ATTEMPTS 10

// Global variables for offset and scale
long OFFSET = 0;
double SCALE = 466.837; // Gi? giá tr? SCALE c?a b?n

// --- Internal state variables for stability logic ---
static int32 previous_stable_raw_value = 0; // Không du?c s? d?ng tích c?c trong logic này, nhung có th? h?u ích sau
static int1 is_stable = TRUE; // Tuong t?, không ?nh hu?ng logic chính hi?n t?i

// Function to read raw data from HX711
unsigned int32 readCount(void) {
   unsigned int32 data = 0;
   unsigned int8 j;
   unsigned int16 timeout_counter = 0;

   // output_bit(HX711_DT_PIN, 1); // Cân nh?c lo?i b? n?u g?p v?n d?
   output_low(HX711_SCK_PIN); 
   delay_us(1);

   while (input(HX711_DT_PIN)) {
      delay_us(1);
      if(++timeout_counter > 65000) return 0x7FFFFF; // Timeout
   }

   for (j = 0; j < 24; j++) {
      output_high(HX711_SCK_PIN); delay_us(1);
      data = data << 1;
      output_low(HX711_SCK_PIN); delay_us(1);
      if (input(HX711_DT_PIN)) {
         data++;
      }
   }
   output_high(HX711_SCK_PIN); delay_us(1);
   data = data ^ 0x800000;
   output_low(HX711_SCK_PIN); delay_us(1);
   return data;
}

// Ð?c trung bình co b?n
int32 readAverage_internal(void) {
   unsigned long sum = 0; 
   int8 k;

   for (k = 0; k < NUM_SAMPLES_FOR_AVERAGE; k++) {
      sum += readCount();
   }
   return (int32)(sum / NUM_SAMPLES_FOR_AVERAGE);
}

// Ð?c giá tr? ?n d?nh
int32 getStableRawValue(void) {
    long readings[NUM_READINGS_FOR_STABILITY]; // Ki?u long (int32) là d? cho giá tr? trung bình
    int8 i, attempts;
    int1 currently_stable_flag; // Ð?i tên d? tránh trùng v?i bi?n static is_stable

    for (attempts = 0; attempts < MAX_STABILIZATION_ATTEMPTS; attempts++) {
        for (i = 0; i < NUM_READINGS_FOR_STABILITY; i++) {
            readings[i] = readAverage_internal();
            if (i < NUM_READINGS_FOR_STABILITY - 1) {
                delay_ms(STABILIZATION_DELAY_MS / NUM_READINGS_FOR_STABILITY); 
            }
        }

        currently_stable_flag = TRUE;
        for (i = 0; i < NUM_READINGS_FOR_STABILITY - 1; i++) {
            if (abs(readings[i] - readings[i+1]) > STABILITY_THRESHOLD_RAW) {
                currently_stable_flag = FALSE;
                break;
            }
        }

        if (currently_stable_flag) {
            // is_stable = TRUE; // C?p nh?t bi?n static n?u b?n mu?n dùng nó ? dâu dó
            unsigned long stable_sum_temp = 0; // Dùng ki?u l?n hon d? c?ng d?n
            for(i=0; i<NUM_READINGS_FOR_STABILITY; i++) {
                stable_sum_temp += readings[i];
            }
            // previous_stable_raw_value = (int32)(stable_sum_temp / NUM_READINGS_FOR_STABILITY);
            return (int32)(stable_sum_temp / NUM_READINGS_FOR_STABILITY);
        }
        
        if (attempts < MAX_STABILIZATION_ATTEMPTS -1) {
             delay_ms(STABILIZATION_DELAY_MS);
        }
    }

    // is_stable = FALSE; // C?p nh?t bi?n static
    unsigned long last_attempt_sum_temp = 0;
    for(i=0; i<NUM_READINGS_FOR_STABILITY; i++) {
        last_attempt_sum_temp += readings[i]; 
    }
    return (int32)(last_attempt_sum_temp / NUM_READINGS_FOR_STABILITY);
}


// Function to get value (raw - offset)
long hx711_get_value(int8 ignored_times) {
   long stable_raw_val = getStableRawValue(); 
   long delta = stable_raw_val - OFFSET;

   // Ngu?ng ch?t (deadband)
   if (abs(delta) < (STABILITY_THRESHOLD_RAW + 50) ) { // Ngu?ng deadband có th? l?n hon ngu?ng ?n d?nh m?t chút
        if (abs(delta) < 350 ) // M?t ngu?ng c?ng hon cho vùng g?n 0
            delta = 0;
   }
   return delta;
}

// Function to get weight in grams
float hx711_get_units(int8 ignored_times) {
   long delta_value = hx711_get_value(1); 

   if (SCALE == 0.0) return 0.0; 
   
   float weight = (float)delta_value / SCALE;
   return weight;
}

// Function to tare (set offset)
void hx711_tare(int8 ignored_times) {
   OFFSET = getStableRawValue(); 
   // previous_stable_raw_value = OFFSET; 
   // is_stable = TRUE;
}

// Function to set scale factor
void hx711_set_scale(double new_scale) {
   SCALE = new_scale;
}

// Function to calibrate scale with a known weight
void hx711_calibrate(float known_weight) {
   if (known_weight <= 0) return;
   hx711_tare(1); 
   
   long raw_value_stable_with_weight = getStableRawValue(); 

   SCALE = (float)(raw_value_stable_with_weight - OFFSET) / known_weight;
}

#endif
