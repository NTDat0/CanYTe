#ifndef HX711_H
#define HX711_H

// HX711 Pin Definitions
#define HX711_DT_PIN PIN_A0
#define HX711_SCK_PIN PIN_A1

// Global variables for offset and scale
long OFFSET = 0;
double SCALE = 36.0;

// Function to read raw data from HX711
long readCount(void) {
   long data = 0;
   int8 j;

   output_low(HX711_DT_PIN); // Reset DT
   output_low(HX711_SCK_PIN); // Reset SCK
   delay_us(1);

   while (input(HX711_DT_PIN)); // Wait for DT to go low
   for (j = 0; j < 24; j++) {
      output_high(HX711_SCK_PIN);
      delay_us(1);
      data = data << 1;
      output_low(HX711_SCK_PIN);
      delay_us(1);
      if (input(HX711_DT_PIN)) {
         data++;
      }
   }
   output_high(HX711_SCK_PIN); // Pulse thêm d? hoàn t?t
   delay_us(1);
   output_low(HX711_SCK_PIN);
   data = data ^ 0x800000; // Bù sign bit
   return data;
}

// Function to read average raw value
long readAverage(void) {
   long sum = 0;
   int k;
   for (k = 0; k < 20; k++) {
      sum += readCount();
      delay_ms(5); // Thêm delay nh? d? gi?m nhi?u
   }
   return sum / 20;
}

// Function to get value (raw - offset)
long hx711_get_value(int8 times) {
   long raw_value = readAverage();
   long delta = raw_value - OFFSET;
   if (delta < 100 && delta > -100) delta = 0; // Filter small noise
   return delta;
}

// Function to get weight in grams
float hx711_get_units(int8 times) {
   float value = (float)hx711_get_value(times) / SCALE;
   if (value < 0) value = 0; // Ensure non-negative
   if (value > 99999) value = 99999; // Limit to 5 digits
   return value;
}

// Function to tare (set offset)
void hx711_tare(int8 times) {
   OFFSET = readAverage();
}

// Function to set scale factor
void hx711_set_scale(double scale) {
   SCALE = scale;
}

#endif
