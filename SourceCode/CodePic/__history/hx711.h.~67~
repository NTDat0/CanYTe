#ifndef HX711_H
#define HX711_H

// HX711 Pin Definitions
#define HX711_DT_PIN PIN_A0
#define HX711_SCK_PIN PIN_A1

// Global variables for offset and scale
long OFFSET = 0;
double SCALE = 190.0; // Adjusted scale factor for better accuracy

// Function to read raw data from HX711
unsigned int32 readCount(void) {
   unsigned int32 data = 0;
   unsigned int8 j;
   
   output_bit(HX711_DT_PIN, 1);
   output_bit(HX711_SCK_PIN, 0);
   while (input(HX711_DT_PIN));
   
   for (j = 0; j < 24; j++) {
      output_bit(HX711_SCK_PIN, 1);
      data = data << 1;
      output_bit(HX711_SCK_PIN, 0);
      if (input(HX711_DT_PIN)) {
         data++;
      }
   }
   
   output_bit(HX711_SCK_PIN, 1);
   data = data ^ 0x800000;
   output_bit(HX711_SCK_PIN, 0);
   
   return data;
}

// Function to read average raw value with more samples for stability
int32 readAverage(void) {
   unsigned int32 sum = 0;
   int8 k;
   
   for (k = 0; k < 10; k++) { // Reduced to 10 samples for faster response
      sum += readCount();
      delay_ms(1); // Small delay between readings
   }
   
   return sum / 10;
}

// Function to get value (raw - offset)
long hx711_get_value(int8 times) {
   long raw_value = readAverage();
   long delta = raw_value - OFFSET;
   
   // Reduced noise threshold for better sensitivity
   if (delta < 100 && delta > -100) delta = 0;
   
   return delta;
}

// Function to get weight in grams
float hx711_get_units(int8 times) {
   float value = (float)hx711_get_value(times) / SCALE;
   
   if (value < 0) value = 0; // Ensure non-negative
   if (value > 99999) value = 99999; // Limit to 5 digits
   
   return value;
}

// Function to tare (set offset)
void hx711_tare(int8 times) {
   OFFSET = readAverage();
}

// Function to set scale factor
void hx711_set_scale(double scale) {
   SCALE = scale;
}

// Function to calibrate scale with a known weight
void hx711_calibrate(float known_weight) {
   if (known_weight <= 0) return; // Prevent division by 0
   
   hx711_tare(10); // Tare before calibration
   delay_ms(1000); // Wait for stability
   
   long raw_value = readAverage();
   SCALE = (float)(raw_value - OFFSET) / known_weight;
}

// Function to perform auto-calibration with known weights
void hx711_auto_calibrate() {
   // This function can be called with known weights for calibration
   // For 305g cup: Call this after placing the cup
   // Example usage: place 305g object, then call this function
   
   hx711_tare(10); // First tare with empty scale
   delay_ms(2000); // Wait 2 seconds for user to place known weight
   
   // Assuming 305g standard weight is placed
   long raw_value = readAverage();
   SCALE = (float)(raw_value - OFFSET) / 305.0;
}

#endif
